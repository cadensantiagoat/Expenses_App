// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_URL")
  relationMode = "prisma"
}

model User {
  id           String        @id @default(uuid())
  clerkId      String        @unique
  email        String        @unique
  name         String?

  transactions Transaction[] // A user can have many transactions
  categories   Category[] // A user can have many categories

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Transaction {
  id String @id @default(uuid())
  title          String    @db.Text
  amount         Decimal   @db.Money
  autopayEnabled Boolean? @default(true)
  monthlyDueDate DateTime?
  description    String?   @db.Text
  frequency String @default("Monthly")

  userId String 
  user   User   @relation(fields: [userId], references: [id])

  categoryName String?
  category     Category? @relation(fields: [categoryName], references: [name]) // a Transaction can have one category

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, id])
  @@index([categoryName]) // defines an index on the field categoryName
}

model Category {
  id           String        @id @default(uuid())
  name         String        @unique @db.Text // might need to remove 'unique' constraint and handle one user having duplicate categories somewhere else.
  transactions Transaction[] // A Category can have many transactions
  user         User          @relation(fields: [userId], references: [id]) // A category can have one user
  userId       String        
  color        String?
  icon         String?

  @@index([userId])
}
